#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <bitset>
#include <cmath>
#include <unordered_map>
#include <queue>
#include <functional>
#include <cstring>
//#include <Windows.h>

using namespace std;
#define FOR(i,m,n) for(int i=(m); i<(n); i++)
#define endl "\n"

int N, M, m_b, m_e;
int graph[2001];
bool cache[2001][2001];

void pelindrome(int begin, int end)
{
	bool &ret = cache[begin + 1][end - 1];
	//cout << begin << "," << end << " " << ret << endl;
	if (ret == false)
		return;
	else
	{
		//cout << graph[begin] << " " << graph[end] << endl;
		if (graph[begin] == graph[end])
			cache[begin][end] = true;
	}
}

void input()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	cin >> N;
	FOR(i, 1, N + 1)
	{	
		cin >> graph[i];
		cache[i][i] = true;
		if (i >= 2) if (graph[i] == graph[i - 1]) cache[i-1][i] = true;
		if (i >= 3) if (graph[i] == graph[i - 2]) cache[i-2][i] = true;
	}

	FOR(d, 3, N)
	{
		FOR(i, 1, N - d+1)
			pelindrome(i, i + d);
	}
	
	//FOR(i, 1, N + 1)
	//{
	//	FOR(j, 1, N + 1)
	//		cout << cache[i][j] << " ";
	//	cout << endl;
	//}
	cin >> M;
	FOR(i, 0, M)
	{
		cin >> m_b >> m_e;
		if (cache[m_b][m_e])
			cout << 1 << endl;
		else
			cout << 0 << endl;
	}
}

int main()
{
	input();
	return 0;
}

/*

1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5 3 1 2 4 5 6 4 6 5 3 3 2 3 1 2 1 3 5 3 5
*/